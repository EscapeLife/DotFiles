# ---------------------
# tmux的常用操作配置 
# ---------------------

# 方向新增面板新增面板
unbind '"'
bind - splitw -v -c '#{pane_current_path}'  # 垂直方向
unbind %
bind = splitw -h -c '#{pane_current_path}'  # 水平方向

# 绑定快捷键为r
bind r source-file ~/.tmux.conf \; display-message "Config reloaded.."

# 开启鼠标支持
set-option -g mouse on

# 快速面板切换
# 绑定hjkl键来调整选择的面板位置快捷键
bind -r k select-pane -U    # 绑定k为↑
bind -r j select-pane -D    # 绑定j为↓
bind -r h select-pane -L    # 绑定h为←
bind -r l select-pane -R    # 绑定l为→
bind -r e lastp             # 选择最后一个面板
bind -r ^e last             # 选择最后一个窗口
bind -r ^u swapp -U         # 与前一个面板交换位置
bind -r ^d swapp -D         # 与后一个面板交换位置

# 面板大小调整
# 绑定Ctrl+hjkl键为面板上下左右调整边缘的快捷指令
bind -r ^k resizep -U 10    # 绑定Ctrl+k为往↑调整面板边缘10个单元格
bind -r ^j resizep -D 10    # 绑定Ctrl+j为往↓调整面板边缘10个单元格
bind -r ^h resizep -L 10    # 绑定Ctrl+h为往←调整面板边缘10个单元格
bind -r ^l resizep -R 10    # 绑定Ctrl+l为往→调整面板边缘10个单元格

# 绑定m键为在新的panel打开man
# bind m command-prompt "splitw -h 'exec man %%'"
# 绑定P键为开启日志功能，如下面板的输出日志将存储到桌面
# bind P pipe-pane -o "cat >>~/Desktop/#W.log" \; display "Toggled logging to ~/Desktop/#W.log"

# 恢复用户空间 
# set -g default-command "reattach-to-user-namespace -l $SHELL"
# if-shell 'test "$(uname -s)" = Darwin' 'set-option -g default-command "exec reattach-to-user-namespace -l $SHELL"'


# ---------------------
# tmux的复制模式配置 
# ---------------------

# 更改复制模式的默认行为为熟悉的vi风格
# tmux中复制模式通常使用复制模式的步骤如下：
#   1. 输入 <[>      进入复制模式
#   2. 按下 <空格键> 开始复制，移动光标选择复制区域
#   3. 按下 <回车键> 复制选中文本并退出复制模式
#   4. 按下 <]>      粘贴文本
# 开启vi风格后，支持vi的C-d、C-u、hjkl等快捷键
setw -g mode-keys vi

# 自定义复制和选择快捷键
# 绑定 <v>/<y> 两键为复制和粘贴使用的快捷键
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# 设置Buffer缓存
# tmux复制操作的内容默认会存进buffer里
# buffer是一个粘贴缓存区，新的缓存总是位于栈顶，常见操作命令如下
#   tmux list-buffers                             # 展示所有的 buffers
#   tmux show-buffer [-b buffer-name]             # 显示指定的 buffer 内容
#   tmux choose-buffer                            # 进入 buffer 选择页面(支持jk上下移动选择，回车选中并粘贴 buffer 内容到面板上)
#   tmux set-buffer                               # 设置buffer内容
#   tmux load-buffer [-b buffer-name] file-path   # 从文件中加载文本到buffer缓存
#   tmux save-buffer [-a] [-b buffer-name] path   # 保存tmux的buffer缓存到本地
#   tmux paste-buffer                             # 粘贴buffer内容到会话中
#   tmux delete-buffer [-b buffer-name]           # 删除指定名称的buffer
# 以上buffer操作在不指定buffer-name时，默认处理是栈顶的buffer缓存
# 默认情况下，buffers内容是独立于系统粘贴板的，它存在于tmux进程中，且可以在会话间共享

# 使用系统粘贴板
# 存在于tmux进程中的buffer缓存，虽然可以在会话间共享，但不能直接与系统粘贴板共享，不免有些遗憾
# 我们都知道，Mac自带 pbcopy 和 pbpaste命令，分别用于复制和粘贴，但在tmux命令中它们却不能正常运行
# 我们可以使用一个包装程序来重新连接到合适的命名空间，然后执行访问用户级命名空间的粘贴板服务，这个包装程序就是reattach-to-user-namespace
#
# buffer缓存复制到Mac系统粘贴板
# bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
# Mac系统粘贴板内容复制到会话
# bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - \; paste-buffer -d"
#
# reattach-to-user-namespace作为包装程序来访问Mac粘贴板，按下 <prefix+Ctrl+c> 键，buffer缓存的内容将复制到粘贴板
# 按下 <prefix+Ctrl+v> 键，粘贴板的内容将通过load-buffer加载，然后由paste-buffer粘贴到tmux会话中
#
# 绑定y键为复制选中文本到Mac系统粘贴板
# bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
# 鼠标拖动选中文本，并复制到Mac系统粘贴板
# bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"
# 完成以上配置后记得重启tmux服务器。至此，复制模式中，按y键将保存选中的文本到Mac系统粘贴板，随后按Command + v键便可粘贴会话中


# ---------------------
# 设置保存tmux会话
# ---------------------

# tmux保护现场的能力依赖于tmux进程，如果进程退出，则意味着会话数据的丢失，因此关机重启后，tmux中的会话将被清空
# 幸运的是，目前有这样两款插件：Tmux Resurrect和Tmux Continuum，可以永久保存tmux会话

# Tmux Resurrect
# 无须任何配置就能够备份tmux会话中的各种细节，包括窗口、面板的顺序、布局、工作目录，运行程序等等数据
# 保存的快捷键: <prefix+Ctrl+s> tmux状态栏在保存开始
# 恢复的快捷键: <prefix+Ctrl+r> tmux状态栏在恢复开始
# 保存时，tmux会话的详细信息会以文本文件的格式保存到~/.tmux/resurrect目录，恢复时则从此处读取
# 由于数据文件是明文的，因此你完全可以自由管理或者编辑这些会话状态文件，如果备份频繁，记得定期清除历史备份
# run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux

# Tmux Continuum
# 在Tmux Resurrec的基础上更进一步，现在保存和恢复全部自动化了，可以无感使用tmux，不用再担心备份问题
# run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux


# ---------------------
# tmux设置会话共享
# ---------------------

# 结对编程
# tmate是tmux的管理工具，它可以轻松的创建tmux会话，并且自动生成ssh链接
# brew install tmate   # 安装tmate
# tmate                # 使用tmate新建一个tmux会话
# tmate show-messages  # 查看tmate生成的ssh链接

# 共享账号&组会话
# 使用tmate远程共享tmux会话，受制于多方的网络质量，必然会存在些许延迟
# 如果共享会话的多方拥有同一个远程服务器的账号，那么我们可以使用组会话解决这个问题
# tmux new -s groupSession                  # 新建一个公共会话
# tmux new -t groupSession -s otherSession  # 加入上面的公共会话

# 独立账号&Socket共享会话
# 开始之前我们需要确保用户对远程服务器上同一个目录拥有相同的读写权限
# 使用new-session创建会话时，使用的是默认的socket位置，默认socket无法操作，所以我们需要创建一个指定socket文件的会话<Paste>
# tmux -S /var/tmux/sharefile         # 创建会话
# tmux -S /var/tmux/sharefile attach  # 用户进入时需要指定socket文件加入会话


# ---------------------
# tmux的优化设置
# ---------------------

# 设置窗口面板起始序号
# set -g base-index 1       # 设置窗口的起始下标为1
# set -g pane-base-index 1  # 设置面板的起始下标为1

# 自定义状态栏
# set -g status-utf8 on                                      # 状态栏支持utf8
# set -g status-interval 1                                     # 状态栏刷新时间
# set -g status-justify left                                   # 状态栏列表左对齐
# setw -g monitor-activity on                                  # 非当前窗口有内容更新时在状态栏通知
# set -g status-bg black                                       # 设置状态栏背景黑色
# set -g status-fg yellow                                      # 设置状态栏前景黄色
# set -g status-style "bg=black, fg=yellow"                    # 状态栏前景背景色
# set -g status-left "#[bg=#FF661D] ❐ #S "                     # 状态栏左侧内容
# set -g status-right 'Continuum status: #{continuum_status}'  # 状态栏右侧内容
# set -g status-left-length 300                                # 状态栏左边长度300
# set -g status-right-length 500                               # 状态栏左边长度500
# set -wg window-status-format " #I #W "                       # 状态栏窗口名称格式
# set -wg window-status-current-format " #I:#W#F "             # 状态栏当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)
# set -wg window-status-separator ""                           # 状态栏窗口名称之间的间隔
# set -wg window-status-current-style "bg=red"                 # 状态栏当前窗口名称的样式
# set -wg window-status-last-style "fg=red"                    # 状态栏最后一个窗口名称的样式
# set -g message-style "bg=#202529, fg=#91A8BA"                # 指定消息通知的前景、后景色

# 开启256colors支持
# set -g default-terminal "tmux-256color"
# set -ga terminal-overrides ",xterm-256color:Tc"

# 关闭默认的rename机制
# tmux默认会自动重命名窗口，频繁的命令行操作，将频繁触发重命名，比较浪费CPU性能，性能差的计算机上，问题可能更为明显
# setw -g automatic-renamnal "tmux-256color"m off
# setw -g allow-rename off

# 去掉小圆点
# tmux a -d
# Ctrl-b:a -d


# ---------------------
# 根据spacevim配置
# ---------------------

# set-option -sg escape-time 10
